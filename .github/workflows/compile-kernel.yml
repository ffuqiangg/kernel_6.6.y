name: Compile Kernel

on:
  repository_dispatch:
    types:
      - compile-kernel
  workflow_dispatch:
    inputs:
      kernel_version:
        description: "Input kernel version"
        required: true
        default: "6.6.1"
      kernel_auto:
        description: "compile latest kernel"
        required: true
        default: true
        type: boolean

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04-arm
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-build-armbian)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          sudo -E apt-get install ntpdate
          sudo -E ntpdate pool.ntp.org
          echo "KERNEL_VERSION=${{ github.event.client_payload.kernel_version }}" >> ${GITHUB_ENV}
          echo "KERNEL_AUTO=${{ github.event.client_payload.kernel_auto }}" >> ${GITHUB_ENV}
          if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
            echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> ${GITHUB_ENV}
            echo "KERNEL_AUTO=${{ inputs.kernel_auto }}" >> ${GITHUB_ENV}
          fi

      - name: Create simulated physical disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -Th

      - name: Create a mapped directory
        working-directory: /builder
        run: |
          df -hT ${PWD}
          mkdir -p /builder/{kernel,output}
          ln -sf /builder/kernel /home/runner/work/_actions/ophub/amlogic-s9xxx-armbian/main/compile-kernel/kernel
          ln -sf /builder/output /home/runner/work/_actions/ophub/amlogic-s9xxx-armbian/main/compile-kernel/output

      - name: Compile the kernel
        uses: ophub/amlogic-s9xxx-armbian@main
        with:
          build_target: kernel
          kernel_version: ${{ env.KERNEL_VERSION }}
          kernel_auto: ${{ env.KERNEL_AUTO }}
          kernel_package: all
          kernel_sign: -ffuqiangg
          kernel_source: unifreq
          kernel_toolchain: gcc
          compress_format: xz
          delete_source: true
          silent_log: true

      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        if: env.PACKAGED_STATUS == 'success' && !cancelled()
        with:
          tag: kernel_${{ env.PACKAGED_OUTPUTTAGS }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Telegram notification
        run: |
          MSG="✅ 内核编译完成 *${PACKAGED_OUTPUTTAGS}*"
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}&parse_mode=MarkDown"
